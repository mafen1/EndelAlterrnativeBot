# bot.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import asyncio
from soundgen import generate_wav, wav_to_mp3

logging.basicConfig(level=logging.INFO)
BOT_TOKEN = "8366694012:AAGQifzu4KjYwMGSRbLoupEtecivDH-4FA0"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
AVAILABLE_DURATIONS = [5, 10, 20, 25, 30, 35, 40, 50]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–µ–∂–∏–º–æ–≤ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
MODE_NAMES = {
    "focus": "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
    "sleep": "–°–æ–Ω",
    "calm": "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
    "energy": "–≠–Ω–µ—Ä–≥–∏—è",
    "deep": "–ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞",
    "creative": "–ö—Ä–µ–∞—Ç–∏–≤",
    "recovery": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
TIME_NAMES = {
    "morning": "–£—Ç—Ä–æ",
    "day": "–î–µ–Ω—å",
    "evening": "–í–µ—á–µ—Ä",
    "night": "–ù–æ—á—å"
}

async def ask_time_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
    keyboard = []
    row = []
    for time_key, time_name in TIME_NAMES.items():
        callback_data = f"tod_{mode}|{time_key}"
        button = InlineKeyboardButton(time_name, callback_data=callback_data)
        row.append(button)
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üåÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ *{MODE_NAMES.get(mode, mode)}*:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def ask_duration(update_or_message, context: ContextTypes.DEFAULT_TYPE, mode: str, forced_time_of_day: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ü–∏–∏ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤."""
    context.user_data['selected_mode'] = mode
    context.user_data['selected_time_of_day'] = forced_time_of_day

    # –ö–Ω–æ–ø–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    keyboard = []
    row = []
    for i, duration in enumerate(AVAILABLE_DURATIONS):
        callback_data = f"duration_{duration}"
        button = InlineKeyboardButton(f"{duration} –º–∏–Ω", callback_data=callback_data)
        row.append(button)
        if len(row) == 4 or i == len(AVAILABLE_DURATIONS) - 1:
            keyboard.append(row)
            row = []

    # –ö–Ω–æ–ø–∫–∞ "–° –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏"
    keyboard.append([InlineKeyboardButton("‚è∏ –° –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏ (—Ç–∏—à–∏–Ω–∞ –≤ –∫–æ–Ω—Ü–µ)", callback_data="with_breaks")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"‚è± –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ *{MODE_NAMES.get(mode, mode)}* –∏ –≤—Ä–µ–º–µ–Ω–∏ *{TIME_NAMES.get(forced_time_of_day)}*:"
    if hasattr(update_or_message, 'message'):
        await update_or_message.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update_or_message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    if data.startswith("tod_"):
        parts = data.split("|")
        if len(parts) != 2:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        mode, time_of_day = parts[0][4:], parts[1]
        if mode not in MODE_NAMES or time_of_day not in TIME_NAMES:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            return
        await query.edit_message_text(f"‚è≥ –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {TIME_NAMES[time_of_day]}. –í—ã–±–∏—Ä–∞—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
        await ask_duration(query.message, context, mode, time_of_day)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if data.startswith("duration_"):
        try:
            duration_min = int(data[9:])
            if duration_min not in AVAILABLE_DURATIONS:
                raise ValueError
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            return

        mode = context.user_data.get('selected_mode')
        time_of_day = context.user_data.get('selected_time_of_day')
        if not mode or not time_of_day:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        context.user_data['selected_duration_min'] = duration_min
        context.user_data['include_breaks'] = False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤

        await query.edit_message_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {duration_min} –º–∏–Ω –¥–ª—è '{MODE_NAMES[mode]}' ({TIME_NAMES[time_of_day]})...")
        await send_sound(query.message, context, mode, time_of_day, duration_min, include_breaks=False)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–° –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏"
    if data == "with_breaks":
        mode = context.user_data.get('selected_mode')
        time_of_day = context.user_data.get('selected_time_of_day')
        if not mode or not time_of_day:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—â—ë —Ä–∞–∑, –Ω–æ —Ç–µ–ø–µ—Ä—å —Å —Ñ–ª–∞–≥–æ–º –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        context.user_data['include_breaks_flag'] = True
        await query.edit_message_text("‚è∏ –í–∫–ª—é—á–µ–Ω—ã –ø–µ—Ä–µ—Ä—ã–≤—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        await ask_duration(query.message, context, mode, time_of_day)
        return

    # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–° –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏"
    if data.startswith("duration_") and context.user_data.get('include_breaks_flag'):
        try:
            duration_min = int(data[9:])
            if duration_min not in AVAILABLE_DURATIONS:
                raise ValueError
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            return

        mode = context.user_data.get('selected_mode')
        time_of_day = context.user_data.get('selected_time_of_day')
        if not mode or not time_of_day:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        context.user_data['selected_duration_min'] = duration_min
        context.user_data['include_breaks'] = True
        del context.user_data['include_breaks_flag']

        await query.edit_message_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {duration_min} –º–∏–Ω —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏ –¥–ª—è '{MODE_NAMES[mode]}' ({TIME_NAMES[time_of_day]})...")
        await send_sound(query.message, context, mode, time_of_day, duration_min, include_breaks=True)
        return

    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def send_sound(message, context: ContextTypes.DEFAULT_TYPE, mode: str, forced_time_of_day: str, duration_min: int, include_breaks: bool = False):
    user = message.from_user
    duration_sec = duration_min * 60
    time_display = TIME_NAMES.get(forced_time_of_day, "–ê–≤—Ç–æ")

    status_msg = await message.reply_text(
        f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é {MODE_NAMES.get(mode, mode)} –∑–≤—É–∫ (~{duration_min} –º–∏–Ω) –¥–ª—è '{time_display}'...\n"
        "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–º WAV, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3."
    )

    try:
        loop = asyncio.get_event_loop()

        await status_msg.edit_text(
            f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é {MODE_NAMES.get(mode, mode)} –∑–≤—É–∫ (~{duration_min} –º–∏–Ω) –¥–ª—è '{time_display}'...\n"
            "–°–æ–∑–¥–∞—é WAV..."
        )

        wav_buffer, actual_time_of_day = await loop.run_in_executor(
            None, generate_wav, mode, duration_sec, "UTC", forced_time_of_day, include_breaks
        )
        wav_bytes = wav_buffer.getvalue()
        logging.info(f"WAV —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(wav_bytes) / (1024 ** 2):.1f} –ú–ë")

        await status_msg.edit_text(
            f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é {MODE_NAMES.get(mode, mode)} –∑–≤—É–∫ (~{duration_min} –º–∏–Ω) –¥–ª—è '{time_display}'...\n"
            "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3..."
        )

        mp3_bytes = await loop.run_in_executor(None, wav_to_mp3, wav_bytes)
        logging.info(f"MP3 –≥–æ—Ç–æ–≤: {len(mp3_bytes) / (1024 ** 2):.1f} –ú–ë")

        await status_msg.delete()

        filename = f"endel_{mode}_{actual_time_of_day}_{duration_min}min{'_breaks' if include_breaks else ''}.mp3"
        await message.reply_audio(
            audio=mp3_bytes,
            filename=filename,
            title=f"Endel-like {MODE_NAMES.get(mode, mode)} ({duration_min} –º–∏–Ω)",
            performer="StudyBot",
            caption=f"üéß –†–µ–∂–∏–º: {MODE_NAMES.get(mode, mode)}\n"
                    f"–í—Ä–µ–º—è: {TIME_NAMES.get(actual_time_of_day, actual_time_of_day)}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~{duration_min} –º–∏–Ω\n"
                    f"{'‚è∏ –° –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏' if include_breaks else '‚ñ∂ –ë–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤'}"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        try:
            await status_msg.delete()
        except:
            pass
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ ---
async def focus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "focus")

async def sleep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "sleep")

async def calm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "calm")

async def energy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "energy")

async def deep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "deep")

async def creative(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "creative")

async def recovery(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_time_of_day(update, context, "recovery")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (—Ä–µ–∂–∏–º focus –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---
async def morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_duration(update, context, "focus", "morning")

async def day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_duration(update, context, "focus", "day")

async def evening(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_duration(update, context, "focus", "evening")

async def night(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await ask_duration(update, context, "focus", "night")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéì Endel-–±–æ—Ç —Å MP3 (–∞–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ ffmpeg)\n\n"
        "*–†–µ–∂–∏–º—ã:*\n"
        "/focus ‚Äî –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏\n"
        "/deep ‚Äî –≥–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "/creative ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "/recovery ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "/sleep ‚Äî –¥–ª—è —Å–Ω–∞\n"
        "/calm ‚Äî –¥–ª—è —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è\n"
        "/energy ‚Äî –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏\n\n"
        "*–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä (—Ä–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞):*\n"
        "/morning ‚Äî –£—Ç—Ä–æ\n"
        "/day ‚Äî –î–µ–Ω—å\n"
        "/evening ‚Äî –í–µ—á–µ—Ä\n"
        "/night ‚Äî –ù–æ—á—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º ‚Üí –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ ‚Üí –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Üí (–æ–ø—Ü. –ø–µ—Ä–µ—Ä—ã–≤—ã)."
    )

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("focus", focus))
    app.add_handler(CommandHandler("deep", deep))
    app.add_handler(CommandHandler("creative", creative))
    app.add_handler(CommandHandler("recovery", recovery))
    app.add_handler(CommandHandler("sleep", sleep))
    app.add_handler(CommandHandler("calm", calm))
    app.add_handler(CommandHandler("energy", energy))
    app.add_handler(CommandHandler("morning", morning))
    app.add_handler(CommandHandler("day", day))
    app.add_handler(CommandHandler("evening", evening))
    app.add_handler(CommandHandler("night", night))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.run_polling()

if __name__ == "__main__":
    main()